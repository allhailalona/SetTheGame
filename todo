This is a general todo workflow - more specifics for each step are present in other files
- optional - abstract game reset logic to one func in each platform as shown in final touches before multiplayer
- optional - abstract fetch request to one func
- optional - properly imp express request types
- optional - notify about apk download on phone dimensions and on site start unless user clicks don't show again
- Note: auth table
- Note: Current OTP implementation uses WebSocket for development. Post-MVP production release would integrate WSS (WebSocket Secure) protocol.

two modes - game in/active
when inactive:
say pick game mode in settings don't let game start without it
show big play buttons nad arrows showing the meaning of each button
when active
add timer/stopwatch and total sets found for this game count
in/correct feedback for sets

- navbar contrast
- remove start game and draw a card and auto find set from navbar
- show big start playing button on board 
- show to other funcs aftewards
- tutorial no redirect simple text
- 3min itimer under which total sts found and stopwatch and sets found for whole stack also show errors
- correct incorrect feedback

  DISCLAIMER:
  This game (Trimatch) is a portfolio project implementation inspired by SET¬Æ, which is owned and copyrighted by Set Enterprises, Inc. This is a non-commercial, educational project with no monetization (no ads, no in-app purchases). While the game mechanics and styling closely follow the original SET¬Æ game, it's created solely for demonstrating programming capabilities in my portfolio. The project maintains a deliberately limited user base and is not being advertised or distributed commercially.
  If you are the rights holder and have any concerns, please contact me at lotanbar3@gmail.com.
- send mail to creator of breakTimer about contribution

# TriMatch - Full Stack Memory Game
Live Demo: [https://trimatch.surge.sh]
Explore the game's features in this full-stack implementation. All features are now accessible.

## Features
‚úÖ Full responsive UI/UX design
‚úÖ Game core mechanics & logic
‚úÖ Real-time game updates
‚úÖ Error handling & logging
‚úÖ Mobile (Expo) & Web (Vue) support
üöß Camera-based SET detection with AI (coming soon)
üöß Scan cards with AI to find sets (coming soon)
‚ùå Google Auth/ Email OTP (dev environment only)

## Quick Start
1. Clone repository: `git clone https://github.com/yourusername/trimatch.git`
2. Install dependencies: `npm install`
3. Set up environment variables: 

```bash
# Redis Config (WSL required)
REDIS_URL="redis://127.0.0.1:6379"
REDIS_SESSION_SECRET="your_session_secret"

# MongoDB
MONGODB_URI="your_mongodb_connection_string"

# Google OAuth 2.0
GOOGLE_CLIENT_ID="your_client_id.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET="your_client_secret"

workflow:
1. expo app - DONE!
2. speed runs - DONE!
3. review security practices before multiplayer - DONE!
4. multiplayer:
  I'm thinking redis sixDigits:availableSessionsIds then seperate sixDigis:boardFeed sixDigit:shuffledStack etc... perhaps add a flag to each function?
  for multiplayer, use web sockest, to avoid collisions lock the socket until the current request is completed
  use a six digit for multiplayer games, while storing two sessionsId inside to handle accessibility permissions
6. AI for detecting sets - in the far future if i have time
7. final touches plus other tasks

FIX ELECTRON BUG WITH THE NEW KNOLEDGE OF TSC --NOEMIT!!

