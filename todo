This is a general todo workflow - more specifics for each step are present in other files

some of those might not be true! chekc it out!!!
- note that: no session persistant for google/otp in both versions, and google auth doesn't work in mobile version
  while secure storage works, I cannot omit cookies, which are present in expo go which uses WebView comp, from the request.
   The cookies are stored after successful OTP validtaion, AND the secure storage is modified as well.
   the on-mount-fetch conditional detects two scenarios: web cookies exist AND secure storage sessionId exists. Two requests. And while the app
   could theoretically work if I fetch the data from the secure-storage condition, It's more difficult to debug when there are multiple blocks involved...
  For google auth session persistance in web version:
    the email is saved in req.session.passport.email and for some reason disappears after front refresh!
- fix errors shown in yellow upon npm run dev
- reset autoFindSet after starting a new game since for some reason it keeps being marked in yellow after restarting game!
- show green on last card selection
- investigate further what happens to active game after login/logout - it should restart - and that includes ALL the game data!
- somewhere here u could add SSL and shit for https socket, perhaps render provides those auto like it does port, worth checking!
- enable nodemailer back! 
- download the app on site start ONCE (if user says don't show again), and then ANOTHER time if he tries to use the site in phone dimensinos

three more commits:
nice notifications showing game results for two possible end games
fix reset game data - treated as Vue refs instead of react states by accident
remove the clear button from mobile

FIRST REVIEW THE PROJECT! MAKE SURE EVERYTHING IS WORKING FINE!

then eslint, STRICT tsproof and prettier:
  go over the types.ts file and see that all types are beind used (so no sessionID for instance is decalred as a string while there is a sessionId in types.ts)
  also, the redis types need attention
  as well as the express req types
  as well as the fgs could be undefined in Vue web front
  as well as prepare https for SSL socket and redeploy with a different address - ideally pattern-matching-game.surge.sh

workflow:
1. expo app - DONE!
2. speed runs - DONE!
3. review security practices before multiplayer:
  - make sure the ENTIRE game is store in redis
  - storing the actual cards in front is fine BUT 
  - verify active session before EVERY modification THEN
  - perform the mod on the data from redis and pass to front
  - this way:
    a. the user can't cheat
    b. we make sure two players have the exact same board.

    then find advanced ts tools to show errors in a list likew ith eslint
4. multiplayer:
  I'm thinking redis sixDigits:availableSessionsIds then seperate sixDigis:boardFeed sixDigit:shuffledStack etc... perhaps add a flag to each function?
  for multiplayer, use web sockest, to avoid collisions lock the socket until the current request is completed
  use a six digit for multiplayer games, while storing two sessionsId inside to handle accessibility permissions
5. DISCLAIMER!!!
6. AI for detecting sets - this probably will NOT happen
7. final touches plus other tasks

